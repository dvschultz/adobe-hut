/* WORK IN PROGRESS *//*Purpose: Converts an Adobe Illustrator Vector File to HPGL language*/var doc,shape,docH;var hpglCom = "IN;SP1;"; // buffer to stick stringsvar HPGLfile;var WILDSTYLE = false;var penOptions = 6;var INCLUDELABEL = true;if ( app.documents.length > 0 ) {    doc = app.activeDocument;    docH = Math.abs(doc.artboards[0].artboardRect[1] - doc.artboards[0].artboardRect[3]);    app.coordinateSystem = CoordinateSystem.ARTBOARDCOORDINATESYSTEM;    main();}function main() {    for (var i = doc.pathItems.length - 1; i >= 0; i--) {        shape = doc.pathItems[i];        if (shape.guides || shape.clipping) continue;        if (WILDSTYLE) hpglCom += getRandomPen();                if(shape.filled) {        } else {        }        hpglCom += returnPathHPGL(shape, shape.closed);    }    if(INCLUDELABEL) hpglCom += returnLabel();    hpglCom+="PU;"    writeFile();}function writeFile() {    var docFile = File(doc.fullName);    HPGLfile = (WILDSTYLE) ? File(docFile.path + "/" + docFile.displayName + "-wildstyle.hpgl") : File(docFile.path + "/" + docFile.displayName + ".hpgl");    HPGLfile.open("w");    HPGLfile.write( hpglCom );    HPGLfile.close();}/*  this needs work still */function returnLabel() {    var docFile = File(doc.fullName),        labelName = docFile.displayName.replace(".ai","");    var temp = "DT$;\n";    temp += "PA0,10;SL;LB" + labelName + "$\n";    return temp;}function returnPathHPGL(shape, closed) {    var temp = "PU";    for (var p= 0; p < shape.pathPoints.length; p++) {        if (p == 1) temp += "PD";        temp+= "";        temp+=  hpglUnit(shape.pathPoints[p].anchor[0]);          temp+= ",";        temp+= hpglUnit(shape.pathPoints[p].anchor[1] + docH );                if (p == 0) {            temp+= ";";        } else if( p!= shape.pathPoints.length-1) {            temp+= ",";        }    }        // if the shape is closed we need to pass it the last point again    if(closed) {        temp+= ",";        temp+=  hpglUnit(shape.pathPoints[0].anchor[0]);          temp+= ",";        temp+= hpglUnit(shape.pathPoints[0].anchor[1] + docH );    }    temp += ";"    return temp;}function hpglUnit(ptUnit) { return Math.abs(Math.round( (ptUnit.toFixed(2)/72)*1016 ));}function convertPoint(item) {        return doc.convertCoordinate(item,CoordinateSystem.DOCUMENTCOORDINATESYSTEM, CoordinateSystem.ARTBOARDCOORDINATESYSTEM);}function getRandomPen() {    var pen = Math.ceil(Math.random()*penOptions);    $.writeln(pen);    return "SP"+pen+";";}