#target illustrator#include "../js/json2.js"var DEBUG = false;//things you can setvar tabSize = 18;var pyramidHeight = 72; //height in points//things you can’t setvar doc, artLayer, newLayer, artLayerName, currX, currY, charStyle, charAttr;var extrudes = [];//fold linevar red = new RGBColor();red.red = 255;red.green = 0;red.blue = 0;//cut linevar black = new RGBColor();black.red = 0;black.green = 0;black.blue = 0;//test linevar cyan = new RGBColor();cyan.red = 0;cyan.green = 255;cyan.blue = 255;if ( app.documents.length > 0 ) {    doc = app.activeDocument;    doc.defaultStrokeColor = red;    artLayer = doc.layers[0];    currX = currY = 0;        try {         charStyle = doc.characterStyles.add("NumberLabel");        charAttr = charStyle.characterAttributes;        charAttr.size = 6;        charAttr.fillColor = red;    } catch (e) {        charStyle = doc.characterStyles.getByName("NumberLabel");;    }        doIt();}function doIt() {    for (var i = 0; i < doc.pathItems.length; i++ ) {        pathRef = doc.pathItems[i];        if(pathRef.locked) continue;        if(!pathRef.selected && DEBUG) {            pathRef.remove();            continue;        }        if(!pathRef.selected && !DEBUG) continue;                artLayerName = pathRef.layer.name;        extrudes.push(i);    }    newLayer = doc.layers.add();    artLayer = doc.layers.getByName(artLayerName);//~     $.writeln(artLayer);//~     $.writeln(doc.layers[0].pathItems.length);    //load json file    var jsonPath = doc.path + "/" +doc.name.replace(".pdf","") + ".json";    var jsonFile = File(jsonPath);    var jsonBlob = null;        if(jsonFile !== false){        jsonFile.open('r');        var content = jsonFile.read();        jsonBlob =  JSON.parse(content);        jsonFile.close();    }        //loop over selected paths and convert to 3d forms    for(var i = 0; i < extrudes.length; i++) {         pathRef = artLayer.pathItems[extrudes[i]];        var data = jsonBlob[i];        if(data.mode == "Uplifting"){            switch(data.drawType) {                case 0:                    //blank, do nothing                    createSquare(pathRef,i+1,data);                    break;                 case 1:                    //layers                    break;                case 2:                    createPlateau(pathRef,i+1,data);                    break;                case 3:                    //break up into two different squares.                    createEqTri(pathRef,i+1,data);                    createEqTri(pathRef,i+1,data);                    break;                 case 4:                    //rows: convert to individual triangle                    createTriPrism2(pathRef,i+1,data);                    break;                 case 5:                    //do nothing, this is a cut out. maybe convert into something else in the future                    break;                 case 6:                    createEqTri(pathRef,i+1,data);                    break;                case 7:                    createTent(pathRef,i+1,data);                    break;                case 8:                    createHalfTri(pathRef,i+1,data);                    break;                case 9:                    createTube(pathRef,i+1,data)                    break;            }        } else if (data.mode == "Messy") {            pyramidHeight = getRandomInt (24, 72); //height in points            switch(data.drawType) {                case 0:                    //blank, maybe cut out a square?                    $.writeln("case 0: blank");                    createSquare(pathRef,i+1,data);                    break;                 case 1:                    createOffCenterPyramid(pathRef,i+1,data);                    break;                case 2:                    pyramidHeight = getRandomInt (24, 48); //height in points                    createPlateau(pathRef,i+1,data);                    break;                case 3:                    //TBD                    createEqTri(pathRef,i+1,data);                    $.writeln("case 3: TBD");                    break;                 case 4:                    //needs waves drawn on it.                    createTube(pathRef,i+1,data);                    break;                 case 5:                    //do nothing, this is a cut out. maybe convert into something else in the future                    $.writeln("case 5: cut out");                    break;                 case 6:                    //rows: convert to individual triangle                    //needs angles drawing on it                    $.writeln("case 6: prism");                    createTriPrism2(pathRef,i+1,data);                    break;                case 7:                    //tbd: cut out circle                    $.writeln("case 7: TBD");                    break;                case 8:                    //needs drawing                    createEqTri(pathRef,i+1,data);                    break;                case 9:                    //needs drawing on it                    createCube(pathRef,i+1,data);                    break;            }        } else if (data.mode == "Scary") {            switch(data.drawType) {                case 0:                    //blank, maybe cut out a square?                    break;                 case 1:                    //centerX = .5 centerY = 1;                    createOffCenterPyramid(pathRef,i+1);                    break;                case 2:                    //centerX = .5 centerY = 0;                    createOffCenterPyramid(pathRef,i+1);                    break;                case 3:                    createEqTri(pathRef,i+1,data);                    break;                 case 4:                    createTent(pathRef,i+1,data);                    break;                 case 5:                    createHalfTri(pathRef,i+1,data);                    break;                 case 6:                    //rows: convert to individual triangle                    createTriPrism2(pathRef,i+1,data);                    break;                case 7:                    //break up into two different squares.                    createEqTri(pathRef,i+1,data);                    createEqTri(pathRef,i+1,data);                    break;                case 8:                    //needs broken up into rows                    createHalfTri(pathRef,i+1,data);                    createHalfTri(pathRef,i+1,data);                    break;                case 9:                    //rows: convert to individual triangle                    createTriPrism2(pathRef,i+1,data);                    break;            }        }                                        // createOffCenterPyramid(pathRef,i+1);//~         createCube(pathRef,i+1);//~         createTriPrism2(pathRef,i+1);//~         createPlateau(pathRef,i+1);//~         createHalfTri(pathRef,i+1);//~         createEqTri(pathRef,i+1);//~         createTent(pathRef,i+1);    }    //number paths    for(var i = 0; i < extrudes.length; i++) {         pathRef = artLayer.pathItems[extrudes[i]];        numberPath(pathRef,i+1);    }}function numberPath(path,index) {    var pw,ph,pointTextRef;    pw = Math.round(path.width);    ph = Math.round(path.height);        pointTextRef = artLayer.textFrames.add();    pointTextRef.contents = index;    pointTextRef.top = path.top - (ph/2);    pointTextRef.left = path.left + (pw/2);}function createSquare(path,index) {    currX = currY = 0;    var sh,sh2,sh3,sh4,pyrH;    pw = Math.floor(path.width);    ph = Math.floor(path.height);        var g = newLayer.groupItems.add();        //add number to group    pointTextRef = g.textFrames.add();    pointTextRef.contents = index;    pointTextRef.top = -1*(ph/2);    pointTextRef.left = (pw/2);    pointTextRef.selected = true;    charStyle.applyTo(pointTextRef.textRange);    pointTextRef.selected = false;        //draw base    drawLine(currX,currY,currX,currY-ph,{"addTo":g,"strokeColor":black});    drawLine(currX,currY-ph,currX+pw,currY-ph,{"addTo":g,"strokeColor":black});    drawLine(currX+pw,currY-ph,currX+pw,currY,{"addTo":g,"strokeColor":black});    drawLine(currX+pw,currY,currX,currY,{"addTo":g,"strokeColor":black});}function createOffCenterPyramid(path,index,data) {    currX = currY = 0;    var sh,sh2,sh3,sh4,pyrH;    pw = Math.floor(path.width);    ph = Math.floor(path.height);        var centerX = data.centerX*pw;    var centerY = data.centerY*ph;        pyrH = pyramidHeight; //todo        var g = newLayer.groupItems.add();        //add number to group    pointTextRef = g.textFrames.add();    pointTextRef.contents = index;    pointTextRef.top = -1*(ph/2);    pointTextRef.left = (pw/2);    pointTextRef.selected = true;    charStyle.applyTo(pointTextRef.textRange);    pointTextRef.selected = false;        //draw base    drawLine(currX,currY,currX,currY-ph,{"addTo":g,"strokeColor":red});    drawLine(currX,currY-ph,currX+pw,currY-ph,{"addTo":g,"strokeColor":red});    drawLine(currX+pw,currY-ph,currX+pw,currY,{"addTo":g,"strokeColor":red});    drawLine(currX+pw,currY,currX,currY,{"addTo":g,"strokeColor":red});    //draw tabs    //left    drawLine(currX,currY,currX-tabSize,currY-tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX-tabSize,currY-tabSize,currX-tabSize,currY-(ph-tabSize),{"addTo":g,"strokeColor":black});    drawLine(currX-tabSize,currY-(ph-tabSize),currX,currY-ph,{"addTo":g,"strokeColor":black});    //bottom    drawLine(currX,currY-ph,currX+tabSize,currY-ph-tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX+tabSize,currY-ph-tabSize,currX+(pw-tabSize),currY-ph-tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX+(pw-tabSize),currY-ph-tabSize,currX+pw,currY-ph,{"addTo":g,"strokeColor":black});    //right    drawLine(currX+pw,currY,currX+pw+tabSize,currY-tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX+pw+tabSize,currY-tabSize,currX+pw+tabSize,currY-(ph-tabSize),{"addTo":g,"strokeColor":black});    drawLine(currX+pw+tabSize,currY-(ph-tabSize),currX+pw,currY-ph,{"addTo":g,"strokeColor":black});        //first triangle    //calc sh    sh = Math.sqrt((centerY*centerY) + (pyrH*pyrH));    drawLine(currX,currY,currX+centerX,currY+sh,{"addTo":g,"strokeColor":red});    drawLine(currX+centerX,currY+sh,currX+pw,currY,{"addTo":g,"strokeColor":red});        //second triangle    sh2 = Math.sqrt( ((pw-centerX)*(pw-centerX)) + (pyrH*pyrH));    var a1 = Math.atan( sh/(pw-centerX) );    var a2 = Math.atan( sh2/centerY );    var shiftX = ph * Math.cos(Math.PI - (a1+a2));    var shiftY = ph * Math.sin(Math.PI - (a1+a2));    var newX = currX+pw+shiftX;    var newY = currY+shiftY;       drawLine(currX+pw,currY,newX,newY,{"addTo":g,"strokeColor":black});    drawLine(newX,newY,currX+centerX,currY+sh,{"addTo":g,"strokeColor":red});        //third triangle    sh3 = Math.sqrt( ((ph-centerY)*(ph-centerY)) + (pyrH*pyrH));    var a2b = Math.atan( sh2/(ph-centerY) );    var a3 = Math.atan( sh3/(pw-centerX) );    var shiftX = pw * Math.cos( Math.PI - (a1+a2+a2b+a3) );    var shiftY = pw * Math.sin( Math.PI - (a1+a2+a2b+a3) );    drawLine(newX,newY,newX-shiftX,newY-shiftY,{"addTo":g,"strokeColor":black});    drawLine(newX-shiftX,newY-shiftY,currX+centerX,currY+sh,{"addTo":g,"strokeColor":red});        //draw tab    var lastAngle = angleFromPoints(newX-shiftX,newY-shiftY,currX+centerX,currY+sh);    var lastLineDist = dist(newX-shiftX,newY-shiftY,currX+centerX,currY+sh);    var angleDist = Math.sqrt((tabSize*tabSize) + (tabSize*tabSize));    tabStartX = newX-shiftX;    tabStartY = newY-shiftY;    tabShiftX = angleDist * Math.cos(lastAngle-Math.PI/4);    tabShiftY = angleDist * Math.sin(lastAngle-Math.PI/4);    drawLine(tabStartX,tabStartY,tabStartX-tabShiftX,tabStartY-tabShiftY,{"addTo":g,"strokeColor":black});    tabStartX = tabStartX-tabShiftX;    tabStartY = tabStartY-tabShiftY;    tabShiftX = (lastLineDist-tabSize*2) * Math.cos(lastAngle);    tabShiftY = (lastLineDist-tabSize*2) * Math.sin(lastAngle);    drawLine(tabStartX,tabStartY,tabStartX-tabShiftX,tabStartY-tabShiftY,{"addTo":g,"strokeColor":black});    drawLine(tabStartX-tabShiftX,tabStartY-tabShiftY,currX+centerX,currY+sh,{"addTo":g,"strokeColor":black});        //fourth triangle    sh4 = Math.sqrt( (centerX*centerX) + (pyrH*pyrH) );    a1 = Math.atan( sh/centerX );    a2 = Math.atan( sh4/centerY );    shiftX = ph * Math.cos(Math.PI - (a1+a2));    shiftY = ph * Math.sin(Math.PI - (a1+a2));    newX = currX-shiftX;    newY = currY+shiftY;        drawLine(currX,currY,newX,newY,{"addTo":g,"strokeColor":black});    drawLine(newX,newY,currX+centerX,currY+sh,{"addTo":g,"strokeColor":black});                 //second triangle //temp//~     sh2 = Math.sqrt( ((pw-centerX)*(pw-centerX)) + (pyrH*pyrH));//~     drawLine(currX+pw,currY,currX+pw+sh2,currY-centerY,{"addTo":g,"strokeColor":cyan});//~     drawLine(currX+pw+sh2,currY-centerY,currX+pw,currY-ph,{"addTo":g,"strokeColor":cyan});        //third //temp//~     sh3 = Math.sqrt( ((ph-centerY)*(ph-centerY)) + (pyrH*pyrH));//~     drawLine(currX,currY-ph,currX+centerX,(currY-ph)-sh3,{"addTo":g,"strokeColor":cyan});//~     drawLine(currX+centerX,(currY-ph)-sh3,currX+pw,currY-ph,{"addTo":g,"strokeColor":cyan});        //fourth //temp//~     sh4 = Math.sqrt( (centerX*centerX) + (pyrH*pyrH) );//~     drawLine(currX,currY,currX-sh4,currY-centerY,{"addTo":g,"strokeColor":cyan});//~     drawLine(currX-sh4,currY-centerY,currX,currY-ph,{"addTo":g,"strokeColor":cyan});//~     }function createPlateau(path,index,data) {    currX = currY = 0;    var sh,sh2,sh3,sh4,pyrH;      pw = Math.round(path.width);    ph = Math.round(path.height);    var inset = (ph>pw) ? pw/6 : ph/6;    if (inset < 5) inset = 5;        pyrH = pyramidHeight; //todo        var g = newLayer.groupItems.add();        //add number to group    pointTextRef = g.textFrames.add();    pointTextRef.contents = index;    pointTextRef.top = -1*(ph/2);    pointTextRef.left = (pw/2);    pointTextRef.selected = true;    charStyle.applyTo(pointTextRef.textRange);    pointTextRef.selected = false;        //draw base    drawLine(currX,currY,currX,currY-ph,{"addTo":g,"strokeColor":red});    drawLine(currX,currY-ph,currX+pw,currY-ph,{"addTo":g,"strokeColor":red});    drawLine(currX+pw,currY-ph,currX+pw,currY,{"addTo":g,"strokeColor":red});    drawLine(currX+pw,currY,currX,currY,{"addTo":g,"strokeColor":red});        //draw side above    drawLine(currX,currY,currX+inset,currY+pyrH,{"addTo":g,"strokeColor":red});    drawLine(currX+inset,currY+pyrH,currX+(pw-inset),currY+pyrH,{"addTo":g,"strokeColor":red});    drawLine(currX+(pw-inset),currY+pyrH,currX+pw,currY,{"addTo":g,"strokeColor":red});        //add tab to left    var lastAngle = angleFromPoints(currX,currY,currX+inset,currY+pyrH);    var lastLineDist = dist(currX,currY,currX+inset,currY+pyrH);    var angleDist = Math.sqrt((tabSize*tabSize) + (tabSize*tabSize));    tabStartX = currX+inset;    tabStartY = currY+pyrH;    tabShiftX = angleDist * Math.cos(lastAngle-Math.PI/4);    tabShiftY = angleDist * Math.sin(lastAngle-Math.PI/4);    drawLine(tabStartX,tabStartY,tabStartX-tabShiftX,tabStartY-tabShiftY,{"addTo":g,"strokeColor":black});    tabStartX = tabStartX-tabShiftX;    tabStartY = tabStartY-tabShiftY;    tabShiftX = (lastLineDist-tabSize*2) * Math.cos(lastAngle);    tabShiftY = (lastLineDist-tabSize*2) * Math.sin(lastAngle);    drawLine(tabStartX,tabStartY,tabStartX-tabShiftX,tabStartY-tabShiftY,{"addTo":g,"strokeColor":black});    drawLine(tabStartX-tabShiftX,tabStartY-tabShiftY,currX,currY,{"addTo":g,"strokeColor":black});        //add tab to right    lastAngle = angleFromPoints(currX+(pw-inset),currY+pyrH,currX+pw,currY);    lastLineDist = dist(currX+(pw-inset),currY+pyrH,currX+pw,currY);    angleDist = Math.sqrt((tabSize*tabSize) + (tabSize*tabSize));    tabStartX = currX+(pw-inset);    tabStartY = currY+pyrH;    tabShiftX = angleDist * Math.cos(lastAngle+((5*Math.PI)/4));    tabShiftY = angleDist * Math.sin(lastAngle+((5*Math.PI)/4));    drawLine(tabStartX,tabStartY,tabStartX-tabShiftX,tabStartY-tabShiftY,{"addTo":g,"strokeColor":black});    tabStartX = tabStartX-tabShiftX;    tabStartY = tabStartY-tabShiftY;    tabShiftX = (lastLineDist-tabSize*2) * Math.cos(lastAngle);    tabShiftY = (lastLineDist-tabSize*2) * Math.sin(lastAngle);    drawLine(tabStartX,tabStartY,tabStartX+tabShiftX,tabStartY+tabShiftY,{"addTo":g,"strokeColor":black});    drawLine(tabStartX+tabShiftX,tabStartY+tabShiftY,currX+pw,currY,{"addTo":g,"strokeColor":black});        //add plateau    drawLine(currX+inset,currY+pyrH,currX+inset,currY+pyrH+(ph-(inset*2)),{"addTo":g,"strokeColor":black}); //left    drawLine(currX+inset,currY+pyrH+(ph-(inset*2)),currX+(pw-inset),currY+pyrH+(ph-(inset*2)),{"addTo":g,"strokeColor":black}); //top    drawLine(currX+(pw-inset),currY+pyrH+(ph-(inset*2)),currX+(pw-inset),currY+pyrH,{"addTo":g,"strokeColor":black}); //right        //draw side below    drawLine(currX,currY-ph,currX+inset,currY-ph-pyrH,{"addTo":g,"strokeColor":red});    drawLine(currX+inset,currY-ph-pyrH,currX+(pw-inset),currY-ph-pyrH,{"addTo":g,"strokeColor":red});    drawLine(currX+(pw-inset),currY-ph-pyrH,currX+pw,currY-ph,{"addTo":g,"strokeColor":red});            //add tab to left    lastAngle = angleFromPoints(currX,currY-ph,currX+inset,currY-ph-pyrH);    lastLineDist = dist(currX,currY-ph,currX+inset,currY-ph-pyrH);    angleDist = Math.sqrt((tabSize*tabSize) + (tabSize*tabSize));    tabStartX = currX;    tabStartY = currY-ph;    tabShiftX = angleDist * Math.cos(lastAngle-((5*Math.PI)/4));    tabShiftY = angleDist * Math.sin(lastAngle-((5*Math.PI)/4));    drawLine(tabStartX,tabStartY,tabStartX-tabShiftX,tabStartY-tabShiftY,{"addTo":g,"strokeColor":black});    tabStartX = tabStartX-tabShiftX;    tabStartY = tabStartY-tabShiftY;    tabShiftX = (lastLineDist-tabSize*2) * Math.cos(lastAngle);    tabShiftY = (lastLineDist-tabSize*2) * Math.sin(lastAngle);    drawLine(tabStartX,tabStartY,tabStartX+tabShiftX,tabStartY+tabShiftY,{"addTo":g,"strokeColor":black});    drawLine(tabStartX+tabShiftX,tabStartY+tabShiftY,currX+inset,currY-ph-pyrH,{"addTo":g,"strokeColor":black});        //add tab to right    lastAngle = angleFromPoints(currX+pw,currY-ph,currX+(pw-inset),currY-ph-pyrH);    lastLineDist = dist(currX+pw,currY-ph,currX+(pw-inset),currY-ph-pyrH);    angleDist = Math.sqrt((tabSize*tabSize) + (tabSize*tabSize));    tabStartX = currX+pw;    tabStartY = currY-ph;    tabShiftX = angleDist * Math.cos(lastAngle+Math.PI/4);    tabShiftY = angleDist * Math.sin(lastAngle+Math.PI/4);    drawLine(tabStartX,tabStartY,tabStartX-tabShiftX,tabStartY-tabShiftY,{"addTo":g,"strokeColor":black});    tabStartX = tabStartX-tabShiftX;    tabStartY = tabStartY-tabShiftY;    tabShiftX = (lastLineDist-tabSize*2) * Math.cos(lastAngle);    tabShiftY = (lastLineDist-tabSize*2) * Math.sin(lastAngle);    drawLine(tabStartX,tabStartY,tabStartX-tabShiftX,tabStartY-tabShiftY,{"addTo":g,"strokeColor":black});    drawLine(tabStartX-tabShiftX,tabStartY-tabShiftY,currX+(pw-inset),currY-ph-pyrH,{"addTo":g,"strokeColor":black});        //add tab to bottom    drawLine(currX+inset,currY-ph-pyrH,currX+inset+tabSize,currY-ph-pyrH-tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX+inset+tabSize,currY-ph-pyrH-tabSize,currX+(pw-(inset+tabSize)),currY-ph-pyrH-tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX+(pw-(inset+tabSize)),currY-ph-pyrH-tabSize,currX+(pw-inset),currY-ph-pyrH,{"addTo":g,"strokeColor":black});    //draw left side    drawLine(currX,currY,currX-pyrH,currY-inset,{"addTo":g,"strokeColor":black});    drawLine(currX-pyrH,currY-inset,currX-pyrH,currY-(ph-inset),{"addTo":g,"strokeColor":red});    drawLine(currX-pyrH,currY-(ph-inset),currX,currY-ph,{"addTo":g,"strokeColor":black});    //tab    drawLine (currX-pyrH,currY-inset,currX-pyrH-tabSize,currY-inset-tabSize, {"addTo":g,"strokeColor":black});    drawLine (currX-pyrH-tabSize,currY-inset-tabSize, currX-pyrH-tabSize,currY-(ph-inset-tabSize), {"addTo":g,"strokeColor":black});    drawLine (currX-pyrH-tabSize,currY-(ph-inset-tabSize), currX-pyrH,currY-(ph-inset), {"addTo":g,"strokeColor":black});        //draw right side    drawLine(currX+pw,currY,currX+pw+pyrH,currY-inset,{"addTo":g,"strokeColor":black});    drawLine(currX+pw+pyrH,currY-inset,currX+pw+pyrH,currY-(ph-inset),{"addTo":g,"strokeColor":red});    drawLine(currX+pw+pyrH,currY-(ph-inset),currX+pw,currY-ph,{"addTo":g,"strokeColor":black});    //tab    drawLine (currX+pw+pyrH,currY-inset,currX+pw+pyrH+tabSize,currY-inset-tabSize, {"addTo":g,"strokeColor":black});    drawLine (currX+pw+pyrH+tabSize,currY-inset-tabSize,currX+pw+pyrH+tabSize,currY-(ph-inset-tabSize), {"addTo":g,"strokeColor":black});    drawLine (currX+pw+pyrH+tabSize,currY-(ph-inset-tabSize),currX+pw+pyrH,currY-(ph-inset), {"addTo":g,"strokeColor":black});        }    function createTriPrism(path,index) {    var dir = "V";    currX = currY = 0;    var sh,pyrH;    pw = Math.round(path.width);    ph = Math.round(path.height);        pyrH = pyramidHeight;        //generate group    var g = newLayer.groupItems.add();        //add number to group    pointTextRef = g.textFrames.add();    pointTextRef.contents = index;    pointTextRef.top = -1*(ph/2);    pointTextRef.left = (pw/2);    pointTextRef.selected = true;    charStyle.applyTo(pointTextRef.textRange);    pointTextRef.selected = false;        if(dir == "H") {        sh = Math.sqrt( pyrH*pyrH + (pw/2)*(pw/2) );    } else {        sh = Math.sqrt( pyrH*pyrH + (ph/2)*(ph/2) );    }        //add number to group    pointTextRef = g.textFrames.add();    pointTextRef.contents = index;    pointTextRef.top = -1*(ph/2);    pointTextRef.left = (pw/2);    pointTextRef.selected = true;    charStyle.applyTo(pointTextRef.textRange);    pointTextRef.selected = false;        //draw base    drawLine(currX,currY,currX,currY-ph,{"addTo":g,"strokeColor":red});    drawLine(currX,currY-ph,currX+pw,currY-ph,{"addTo":g,"strokeColor":red});    drawLine(currX+pw,currY-ph,currX+pw,currY,{"addTo":g,"strokeColor":red});    drawLine(currX+pw,currY,currX,currY,{"addTo":g,"strokeColor":red});        if(dir == "H") {        //left tab on base        drawLine(currX,currY,currX-tabSize,currY-tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX-tabSize,currY-tabSize,currX-tabSize,currY-(ph-tabSize),{"addTo":g,"strokeColor":black});        drawLine(currX-tabSize,currY-(ph-tabSize),currX,currY-ph,{"addTo":g,"strokeColor":black});                //draw top tri        drawLine(currX,currY,currX+pw/2,currY+pyrH,{"addTo":g,"strokeColor":black}); //left        drawLine(currX+pw/2,currY+pyrH,currX+pw,currY,{"addTo":g,"strokeColor":black}); //right                //draw bottom tri        drawLine(currX,currY-ph,currX+pw/2,currY-ph-pyrH,{"addTo":g,"strokeColor":black}); //left        drawLine(currX+pw/2,currY-ph-pyrH,currX+pw,currY-ph,{"addTo":g,"strokeColor":black}); //right                currX+=pw;        //draw side one        drawLine(currX,currY,currX+sh,currY,{"addTo":g,"strokeColor":red}); //top        drawLine(currX+sh,currY,currX+sh,currY-ph,{"addTo":g,"strokeColor":red}); //right        drawLine(currX+sh,currY-ph,currX,currY-ph,{"addTo":g,"strokeColor":red}); //bottom        //top tab        drawLine(currX,currY,currX+tabSize,currY+tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX+tabSize,currY+tabSize,currX+(sh-tabSize),currY+tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX+(sh-tabSize),currY+tabSize,currX+sh,currY,{"addTo":g,"strokeColor":black});        //bottom tab        drawLine(currX,currY-ph,currX+tabSize,currY-ph-tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX+tabSize,currY-ph-tabSize,currX+(sh-tabSize),currY-ph-tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX+(sh-tabSize),currY-ph-tabSize,currX+sh,currY-ph,{"addTo":g,"strokeColor":black});                currX+=sh;        //draw side two        drawLine(currX,currY,currX+sh,currY,{"addTo":g,"strokeColor":red}); //top        drawLine(currX+sh,currY,currX+sh,currY-ph,{"addTo":g,"strokeColor":black}); //right        drawLine(currX+sh,currY-ph,currX,currY-ph,{"addTo":g,"strokeColor":red}); //bottom        //top tab        drawLine(currX,currY,currX+tabSize,currY+tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX+tabSize,currY+tabSize,currX+(sh-tabSize),currY+tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX+(sh-tabSize),currY+tabSize,currX+sh,currY,{"addTo":g,"strokeColor":black});        //bottom tab        drawLine(currX,currY-ph,currX+tabSize,currY-ph-tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX+tabSize,currY-ph-tabSize,currX+(sh-tabSize),currY-ph-tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX+(sh-tabSize),currY-ph-tabSize,currX+sh,currY-ph,{"addTo":g,"strokeColor":black});    }    else if (dir=="V") {        //draw top tab on base        drawLine(currX,currY,currX+tabSize,currY+tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX+tabSize,currY+tabSize,currX+(pw-tabSize),currY+tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX+(pw-tabSize),currY+tabSize,currX+pw,currY,{"addTo":g,"strokeColor":black});                //draw left tri        drawLine(currX,currY,currX-pyrH,currY-ph/2,{"addTo":g,"strokeColor":black}); //top        drawLine(currX-pyrH,currY-ph/2,currX,currY-ph,{"addTo":g,"strokeColor":black}); //bottom                //draw right tri        drawLine(currX+pw,currY,currX+pw+pyrH,currY-ph/2,{"addTo":g,"strokeColor":black}); //top        drawLine(currX+pw+pyrH,currY-ph/2,currX+pw,currY-ph,{"addTo":g,"strokeColor":black}); //bottom                currY-=ph;        //draw side one        drawLine(currX,currY,currX,currY-sh,{"addTo":g,"strokeColor":red}); //left        drawLine(currX,currY-sh,currX+pw,currY-sh,{"addTo":g,"strokeColor":red}); //bottom        drawLine(currX+pw,currY-sh,currX+pw,currY,{"addTo":g,"strokeColor":red}); //right        //left tab        drawLine(currX,currY,currX-tabSize,currY-tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX-tabSize,currY-tabSize,currX-tabSize,currY-(sh-tabSize),{"addTo":g,"strokeColor":black});        drawLine(currX-tabSize,currY-(sh-tabSize),currX,currY-sh,{"addTo":g,"strokeColor":black});        //right tab        drawLine(currX+pw,currY,currX+pw+tabSize,currY-tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX+pw+tabSize,currY-tabSize,currX+pw+tabSize,currY-(sh-tabSize),{"addTo":g,"strokeColor":black});        drawLine(currX+pw+tabSize,currY-(sh-tabSize),currX+pw,currY-sh,{"addTo":g,"strokeColor":black});                currY-=sh;        //draw side two        drawLine(currX,currY,currX,currY-sh,{"addTo":g,"strokeColor":red}); //left        drawLine(currX,currY-sh,currX+pw,currY-sh,{"addTo":g,"strokeColor":black}); //bottom        drawLine(currX+pw,currY-sh,currX+pw,currY,{"addTo":g,"strokeColor":red}); //right        //left tab        drawLine(currX,currY,currX-tabSize,currY-tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX-tabSize,currY-tabSize,currX-tabSize,currY-(sh-tabSize),{"addTo":g,"strokeColor":black});        drawLine(currX-tabSize,currY-(sh-tabSize),currX,currY-sh,{"addTo":g,"strokeColor":black});        //right tab        drawLine(currX+pw,currY,currX+pw+tabSize,currY-tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX+pw+tabSize,currY-tabSize,currX+pw+tabSize,currY-(sh-tabSize),{"addTo":g,"strokeColor":black});        drawLine(currX+pw+tabSize,currY-(sh-tabSize),currX+pw,currY-sh,{"addTo":g,"strokeColor":black});    }        }function createTriPrism2(path,index) {    var dir = "H";    currX = currY = 0;    var sh,pyrH;    pw = Math.round(path.width);    ph = Math.round(path.height);        pyrH = pyramidHeight;        //generate group    var g = newLayer.groupItems.add();        //add number to group    pointTextRef = g.textFrames.add();    pointTextRef.contents = index;    pointTextRef.top = -1*(ph/2);    pointTextRef.left = (pw/2);    pointTextRef.selected = true;    charStyle.applyTo(pointTextRef.textRange);    pointTextRef.selected = false;        if(dir == "H") {        sh = Math.sqrt( pyrH*pyrH + (pw/2)*(pw/2) );    } else {        sh = Math.sqrt( pyrH*pyrH + (ph/2)*(ph/2) );    }        //add number to group    pointTextRef = g.textFrames.add();    pointTextRef.contents = index;    pointTextRef.top = -1*(ph/2);    pointTextRef.left = (pw/2);    pointTextRef.selected = true;    charStyle.applyTo(pointTextRef.textRange);    pointTextRef.selected = false;        if(dir == "H") {                //draw base        drawLine(currX,currY,currX,currY-ph,{"addTo":g,"strokeColor":black});        drawLine(currX,currY-ph,currX+pw,currY-ph,{"addTo":g,"strokeColor":red});        drawLine(currX+pw,currY-ph,currX+pw,currY,{"addTo":g,"strokeColor":red});        drawLine(currX+pw,currY,currX,currY,{"addTo":g,"strokeColor":red});                //draw top tri        drawLine(currX,currY,currX+pw/2,currY+pyrH,{"addTo":g,"strokeColor":red}); //left        drawLine(currX+pw/2,currY+pyrH,currX+pw,currY,{"addTo":g,"strokeColor":red}); //right        //left tab        //right tab                //draw bottom tri        drawLine(currX,currY-ph,currX+pw/2,currY-ph-pyrH,{"addTo":g,"strokeColor":red}); //left        drawLine(currX+pw/2,currY-ph-pyrH,currX+pw,currY-ph,{"addTo":g,"strokeColor":red}); //right        //left tab        //right tab                currX+=pw;        //draw side one        drawLine(currX,currY,currX+sh,currY,{"addTo":g,"strokeColor":black}); //top        drawLine(currX+sh,currY,currX+sh,currY-ph,{"addTo":g,"strokeColor":red}); //right        drawLine(currX+sh,currY-ph,currX,currY-ph,{"addTo":g,"strokeColor":black}); //bottom                currX+=sh;        //draw side two        drawLine(currX,currY,currX+sh,currY,{"addTo":g,"strokeColor":black}); //top        drawLine(currX+sh,currY,currX+sh,currY-ph,{"addTo":g,"strokeColor":red}); //right        drawLine(currX+sh,currY-ph,currX,currY-ph,{"addTo":g,"strokeColor":black}); //bottom                currX+=sh;        //right tab on base        drawLine(currX,currY,currX+tabSize, currY-tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX+tabSize, currY-tabSize,currX+tabSize, currY-(ph-tabSize),{"addTo":g,"strokeColor":black});        drawLine(currX+tabSize, currY-(ph-tabSize),currX, currY-ph,{"addTo":g,"strokeColor":black});    }    else if (dir=="V") {        //draw top tab on base        drawLine(currX,currY,currX+tabSize,currY+tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX+tabSize,currY+tabSize,currX+(pw-tabSize),currY+tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX+(pw-tabSize),currY+tabSize,currX+pw,currY,{"addTo":g,"strokeColor":black});                //draw left tri        drawLine(currX,currY,currX-pyrH,currY-ph/2,{"addTo":g,"strokeColor":black}); //top        drawLine(currX-pyrH,currY-ph/2,currX,currY-ph,{"addTo":g,"strokeColor":black}); //bottom                //draw right tri        drawLine(currX+pw,currY,currX+pw+pyrH,currY-ph/2,{"addTo":g,"strokeColor":black}); //top        drawLine(currX+pw+pyrH,currY-ph/2,currX+pw,currY-ph,{"addTo":g,"strokeColor":black}); //bottom                currY-=ph;        //draw side one        drawLine(currX,currY,currX,currY-sh,{"addTo":g,"strokeColor":red}); //left        drawLine(currX,currY-sh,currX+pw,currY-sh,{"addTo":g,"strokeColor":red}); //bottom        drawLine(currX+pw,currY-sh,currX+pw,currY,{"addTo":g,"strokeColor":red}); //right        //left tab        drawLine(currX,currY,currX-tabSize,currY-tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX-tabSize,currY-tabSize,currX-tabSize,currY-(sh-tabSize),{"addTo":g,"strokeColor":black});        drawLine(currX-tabSize,currY-(sh-tabSize),currX,currY-sh,{"addTo":g,"strokeColor":black});        //right tab        drawLine(currX+pw,currY,currX+pw+tabSize,currY-tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX+pw+tabSize,currY-tabSize,currX+pw+tabSize,currY-(sh-tabSize),{"addTo":g,"strokeColor":black});        drawLine(currX+pw+tabSize,currY-(sh-tabSize),currX+pw,currY-sh,{"addTo":g,"strokeColor":black});                currY-=sh;        //draw side two        drawLine(currX,currY,currX,currY-sh,{"addTo":g,"strokeColor":red}); //left        drawLine(currX,currY-sh,currX+pw,currY-sh,{"addTo":g,"strokeColor":black}); //bottom        drawLine(currX+pw,currY-sh,currX+pw,currY,{"addTo":g,"strokeColor":red}); //right        //left tab        drawLine(currX,currY,currX-tabSize,currY-tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX-tabSize,currY-tabSize,currX-tabSize,currY-(sh-tabSize),{"addTo":g,"strokeColor":black});        drawLine(currX-tabSize,currY-(sh-tabSize),currX,currY-sh,{"addTo":g,"strokeColor":black});        //right tab        drawLine(currX+pw,currY,currX+pw+tabSize,currY-tabSize,{"addTo":g,"strokeColor":black});        drawLine(currX+pw+tabSize,currY-tabSize,currX+pw+tabSize,currY-(sh-tabSize),{"addTo":g,"strokeColor":black});        drawLine(currX+pw+tabSize,currY-(sh-tabSize),currX+pw,currY-sh,{"addTo":g,"strokeColor":black});    }        }function createCube(path,index) {    currX = currY = 0;    var sh,cubeH;    pw = Math.round(path.width);    ph = Math.round(path.height);        cubeH = pyramidHeight;        //generate group    var g = newLayer.groupItems.add();        //add number to group    pointTextRef = g.textFrames.add();    pointTextRef.contents = index;    pointTextRef.top = -1*(ph/2);    pointTextRef.left = (pw/2);    pointTextRef.selected = true;    charStyle.applyTo(pointTextRef.textRange);    pointTextRef.selected = false;        //draw base    drawLine(currX,currY,currX,currY-ph,{"addTo":g,"strokeColor":red});    drawLine(currX,currY-ph,currX+pw,currY-ph,{"addTo":g,"strokeColor":red});    drawLine(currX+pw,currY-ph,currX+pw,currY,{"addTo":g,"strokeColor":red});    drawLine(currX+pw,currY,currX,currY,{"addTo":g,"strokeColor":red});        //bottom tab    drawLine(currX,currY-ph,currX+tabSize,currY-ph-tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX+tabSize,currY-ph-tabSize,currX+(pw-tabSize),currY-ph-tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX+(pw-tabSize),currY-ph-tabSize,currX+pw,currY-ph,{"addTo":g,"strokeColor":black});        //left side    drawLine(currX,currY,currX-cubeH,currY,{"addTo":g,"strokeColor":red}); //top    drawLine(currX-cubeH,currY,currX-cubeH,currY-ph,{"addTo":g,"strokeColor":red}); //left    drawLine(currX,currY-ph,currX-cubeH,currY-ph,{"addTo":g,"strokeColor":red}); //bottom    //left side tab bottom    drawLine(currX-cubeH,currY-ph,currX-cubeH+tabSize,currY-ph-tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX-cubeH+tabSize,currY-ph-tabSize,currX-tabSize,currY-ph-tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX-tabSize,currY-ph-tabSize,currX,currY-ph,{"addTo":g,"strokeColor":black});    //left side tab top    drawLine(currX-cubeH,currY,currX-cubeH+tabSize,currY+tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX-cubeH+tabSize,currY+tabSize,currX-tabSize,currY+tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX-tabSize,currY+tabSize,currX,currY,{"addTo":g,"strokeColor":black});        //left side tab left    drawLine(currX-cubeH,currY,currX-cubeH-tabSize,currY-tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX-cubeH-tabSize,currY-tabSize,currX-cubeH-tabSize,currY-(ph-tabSize),{"addTo":g,"strokeColor":black});    drawLine(currX-cubeH-tabSize,currY-(ph-tabSize),currX-cubeH,currY-ph,{"addTo":g,"strokeColor":black});        //right side    drawLine(currX+pw,currY,currX+pw+cubeH,currY,{"addTo":g,"strokeColor":red}); //top    drawLine(currX+pw+cubeH,currY,currX+pw+cubeH,currY-ph,{"addTo":g,"strokeColor":red}); //right    drawLine(currX+pw,currY-ph,currX+pw+cubeH,currY-ph,{"addTo":g,"strokeColor":red}); //bottom    //left side tab bottom    drawLine(currX+pw,currY-ph,currX+pw+tabSize,currY-ph-tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX+pw+tabSize,currY-ph-tabSize,currX+pw+(cubeH-tabSize),currY-ph-tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX+pw+(cubeH-tabSize),currY-ph-tabSize,currX+pw+cubeH,currY-ph,{"addTo":g,"strokeColor":black});    //left side tab top    drawLine(currX+pw,currY,currX+pw+tabSize,currY+tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX+pw+tabSize,currY+tabSize,currX+pw+(cubeH-tabSize),currY+tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX+pw+(cubeH-tabSize),currY+tabSize,currX+pw+cubeH,currY,{"addTo":g,"strokeColor":black});    //left side tab right    drawLine(currX+pw+cubeH,currY,currX+pw+cubeH+tabSize,currY-tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX+pw+cubeH+tabSize,currY-tabSize,currX+pw+cubeH+tabSize,currY-(ph-tabSize),{"addTo":g,"strokeColor":black});    drawLine(currX+pw+cubeH+tabSize,currY-(ph-tabSize),currX+pw+cubeH,currY-ph,{"addTo":g,"strokeColor":black});        //up side    drawLine(currX,currY,currX,currY+cubeH,{"addTo":g,"strokeColor":black}); //left    drawLine(currX,currY+cubeH,currX+pw,currY+cubeH,{"addTo":g,"strokeColor":red}); //top    drawLine(currX+pw,currY+cubeH,currX+pw,currY,{"addTo":g,"strokeColor":black}); //right        currY+=cubeH;        //top side    drawLine(currX,currY,currX,currY+ph,{"addTo":g,"strokeColor":black}); //left    drawLine(currX,currY+ph,currX+pw,currY+ph,{"addTo":g,"strokeColor":red}); //top    drawLine(currX+pw,currY+ph,currX+pw,currY,{"addTo":g,"strokeColor":black}); //right        currY+=ph;        //down side    drawLine(currX,currY,currX,currY+cubeH,{"addTo":g,"strokeColor":black}); //left    drawLine(currX,currY+cubeH,currX+pw,currY+cubeH,{"addTo":g,"strokeColor":black}); //top    drawLine(currX+pw,currY+cubeH,currX+pw,currY,{"addTo":g,"strokeColor":black}); //right}function createTent(path,index) {    var dir = "V";    currX = currY = 0;    var sh,pyrH;    pw = Math.round(path.width);    ph = Math.round(path.height);        //generate group    var g = newLayer.groupItems.add();        //add number to group    pointTextRef = g.textFrames.add();    pointTextRef.contents = index;    pointTextRef.top = -1*(ph/2);    pointTextRef.left = (pw/2);    pointTextRef.selected = true;    charStyle.applyTo(pointTextRef.textRange);    pointTextRef.selected = false;            //calc slant height    pyrH = pyramidHeight; //todo: turn this into a height checking function        if(dir == "H") {        sh = Math.sqrt( pyrH*pyrH + (pw/2)*(pw/2) );    } else {        sh = Math.sqrt( pyrH*pyrH + (ph/2)*(ph/2) );    }    if(dir == "H") {        //add number to group        pointTextRef = g.textFrames.add();        pointTextRef.contents = index;        pointTextRef.top = -1*(ph/2);        pointTextRef.left = (pw/4);        pointTextRef.selected = true;        charStyle.applyTo(pointTextRef.textRange);                //draw half of Base        drawLine(currX,currY,currX,currY-ph,{"addTo":g,"strokeColor":black}); //left        drawLine(currX,currY-ph,currX+pw/2,currY-ph,{"addTo":g,"strokeColor":black}); //bottom        drawLine(currX+pw/2,currY-ph,currX+pw/2,currY,{"addTo":g,"strokeColor":red}); //right        drawLine(currX+pw/2,currY,currX,currY,{"addTo":g,"strokeColor":black}); //top                currX += pw/2;                // draw first slant        drawLine(currX,currY,currX+sh,currY,{"addTo":g,"strokeColor":black}); //top        drawLine(currX+sh,currY-ph,currX+sh,currY,{"addTo":g,"strokeColor":red}); //right        drawLine(currX,currY-ph,currX+sh,currY-ph,{"addTo":g,"strokeColor":black}); //bottom                currX += sh;                // draw second slant        drawLine(currX,currY,currX+sh,currY,{"addTo":g,"strokeColor":black}); //top        drawLine(currX+sh,currY-ph,currX+sh,currY,{"addTo":g,"strokeColor":red}); //right        drawLine(currX,currY-ph,currX+sh,currY-ph,{"addTo":g,"strokeColor":black}); //bottom                currX += sh;                //draw half of Base        drawLine(currX,currY-ph,currX+pw/2,currY-ph,{"addTo":g,"strokeColor":black}); //bottom        drawLine(currX+pw/2,currY-ph,currX+pw/2,currY,{"addTo":g,"strokeColor":black}); //right        drawLine(currX+pw/2,currY,currX,currY,{"addTo":g,"strokeColor":black}); //top    }    if (dir == "V") {        //add number to group        pointTextRef = g.textFrames.add();        pointTextRef.contents = index;        pointTextRef.top = -1*(ph/4);        pointTextRef.left = (pw/2);        pointTextRef.selected = true;        charStyle.applyTo(pointTextRef.textRange);                //draw half of Base        drawLine(currX,currY,currX,currY-ph/2,{"addTo":g,"strokeColor":black}); //left        drawLine(currX,currY-ph/2,currX+pw,currY-ph/2,{"addTo":g,"strokeColor":red}); //bottom        drawLine(currX+pw,currY-ph/2,currX+pw,currY,{"addTo":g,"strokeColor":black}); //right        drawLine(currX+pw,currY,currX,currY,{"addTo":g,"strokeColor":black}); //top                currY -= ph/2;                // draw first slant        drawLine(currX,currY,currX,currY-sh,{"addTo":g,"strokeColor":black}); //left        drawLine(currX,currY-sh,currX+pw,currY-sh,{"addTo":g,"strokeColor":red}); //bottom        drawLine(currX+pw,currY-sh,currX+pw,currY,{"addTo":g,"strokeColor":black}); //right                currY -= sh;                // draw second slant        drawLine(currX,currY,currX,currY-sh,{"addTo":g,"strokeColor":black}); //left        drawLine(currX,currY-sh,currX+pw,currY-sh,{"addTo":g,"strokeColor":red}); //bottom        drawLine(currX+pw,currY-sh,currX+pw,currY,{"addTo":g,"strokeColor":black}); //right                currY -= sh;                //draw half of Base        drawLine(currX,currY,currX,currY-ph/2,{"addTo":g,"strokeColor":black}); //left        drawLine(currX,currY-ph/2,currX+pw,currY-ph/2,{"addTo":g,"strokeColor":black}); //bottom        drawLine(currX+pw,currY-ph/2,currX+pw,currY,{"addTo":g,"strokeColor":black}); //right            }    }function createEqTri(path,index) {    currX = currY = 0;    var pw,ph,pyrH,sh,pointTextRef;    pw = Math.round(path.width);    ph = Math.round(path.height);//~     $.writeln (pw);//~     $.writeln (ph);        if(pw == ph){        sh = sh2 = Math.sqrt( (pw*pw) - ((pw/2)*(pw/2)) );        pyrH = Math.sqrt( (sh*sh) - ((pw/2)*(pw/2)) );    } else {        pyrH = pyramidHeight; //two inches        sh = Math.sqrt( Math.pow(ph/2,2) + Math.pow(pyrH,2) );        sh2 = Math.sqrt( Math.pow(pw/2,2) + Math.pow(pyrH,2) );    }    //generate group    var g = newLayer.groupItems.add();        //add number to group    pointTextRef = g.textFrames.add();    pointTextRef.contents = index;    pointTextRef.top = -1*(ph/2);    pointTextRef.left = (pw/2);    pointTextRef.selected = true;    charStyle.applyTo(pointTextRef.textRange);        //draw base    drawLine(currX,currY,currX,currY-ph,{"addTo":g,"strokeColor":red});    drawLine(currX,currY-ph,currX+pw,currY-ph,{"addTo":g,"strokeColor":red});    drawLine(currX+pw,currY-ph,currX+pw,currY,{"addTo":g,"strokeColor":red});    drawLine(currX+pw,currY,currX,currY,{"addTo":g,"strokeColor":red});        //draw tabs    //left    drawLine(currX,currY,currX-tabSize,currY-tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX-tabSize,currY-tabSize,currX-tabSize,currY-(ph-tabSize),{"addTo":g,"strokeColor":black});    drawLine(currX-tabSize,currY-(ph-tabSize),currX,currY-ph,{"addTo":g,"strokeColor":black});    //bottom    drawLine(currX,currY-ph,currX+tabSize,currY-ph-tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX+tabSize,currY-ph-tabSize,currX+(pw-tabSize),currY-ph-tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX+(pw-tabSize),currY-ph-tabSize,currX+pw,currY-ph,{"addTo":g,"strokeColor":black});    //right    drawLine(currX+pw,currY,currX+pw+tabSize,currY-tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX+pw+tabSize,currY-tabSize,currX+pw+tabSize,currY-(ph-tabSize),{"addTo":g,"strokeColor":black});    drawLine(currX+pw+tabSize,currY-(ph-tabSize),currX+pw,currY-ph,{"addTo":g,"strokeColor":black});        //first and third triangles: base is pw, radius is ph/2    //slant height (sh) is sqrt of pyrH squared + radius squared//~     drawLine(currX+pw/2,currY,currX+pw/2,currY+sh,cyan); //sh    drawLine(currX,currY,currX+pw/2,currY+sh,{"addTo":g,"strokeColor":red});    drawLine(currX+pw/2,currY+sh,currX+pw,currY,{"addTo":g,"strokeColor":red});//~     drawLine(currX+pw/2,currY-ph,currX+pw/2,currY-ph-sh,cyan); //sh    // get first angle    var a1 = Math.atan( sh/(pw/2) );    var a2 = Math.atan( sh2/(ph/2) );    var shiftX = ph * Math.cos(Math.PI - (a1+a2));    var shiftY = ph * Math.sin(Math.PI - (a1+a2));       var newX = currX+pw+shiftX;    var newY = currY+shiftY;       //second triangles: base is ph, radius is pw/2    drawLine(currX+pw,currY,newX,newY,{"addTo":g,"strokeColor":black});    drawLine(newX,newY,currX+pw/2,currY+sh,{"addTo":g,"strokeColor":red});        //fourth triangle: reversed position    drawLine(currX,currY,currX-shiftX,currY+shiftY,{"addTo":g,"strokeColor":black});    drawLine(currX-shiftX,currY+shiftY,currX+pw/2,currY+sh,{"addTo":g,"strokeColor":black});        var a3 = ((Math.PI - (a1+a2))*2);    //draw third triangle on end    var shiftX = pw * Math.cos(a3);    var shiftY = pw * Math.sin(a3);        drawLine(newX,newY,newX+shiftX,newY+shiftY,{"addTo":g,"strokeColor":black});    drawLine(newX,newY,newX+shiftX,newY+shiftY,{"addTo":g,"strokeColor":black});    drawLine(newX+shiftX,newY+shiftY,currX+pw/2,currY+sh,{"addTo":g,"strokeColor":red});        //draw tab    var lastAngle = angleFromPoints(newX+shiftX,newY+shiftY,currX+pw/2,currY+sh);    var lastLineDist = dist(newX+shiftX,newY+shiftY,currX+pw/2,currY+sh);    var angleDist = Math.sqrt((tabSize*tabSize) + (tabSize*tabSize));    tabStartX = newX+shiftX;    tabStartY = newY+shiftY;    tabShiftX = angleDist * Math.cos(lastAngle-Math.PI/4);    tabShiftY = angleDist * Math.sin(lastAngle-Math.PI/4);    drawLine(tabStartX,tabStartY,tabStartX-tabShiftX,tabStartY-tabShiftY,{"addTo":g,"strokeColor":black});    tabStartX = tabStartX-tabShiftX;    tabStartY = tabStartY-tabShiftY;    tabShiftX = (lastLineDist-tabSize*2) * Math.cos(lastAngle);    tabShiftY = (lastLineDist-tabSize*2) * Math.sin(lastAngle);    drawLine(tabStartX,tabStartY,tabStartX-tabShiftX,tabStartY-tabShiftY,{"addTo":g,"strokeColor":black});    drawLine(tabStartX-tabShiftX,tabStartY-tabShiftY,currX+pw/2,currY+sh,{"addTo":g,"strokeColor":black});} // end createEqTri()function createHalfTri(path,index) {    currX = currY = 0;    var pw,ph,pyrH,sh,pointTextRef;    pw = Math.round(path.width);    ph = Math.round(path.height);//~     $.writeln (pw);//~     $.writeln (ph);        if(pw == ph){        sh = sh2 = Math.sqrt( (pw*pw) - ((pw/2)*(pw/2)) );        pyrH = Math.sqrt( (sh*sh) - ((pw/2)*(pw/2)) );    } else {        pyrH = pyramidHeight; //two inches        sh = Math.sqrt( Math.pow(ph/2,2) + Math.pow(pyrH,2) );        sh2 = Math.sqrt( Math.pow(pw/2,2) + Math.pow(pyrH,2) );    }    //generate group    var g = newLayer.groupItems.add();        //add number to group    pointTextRef = g.textFrames.add();    pointTextRef.contents = index;    pointTextRef.top = -1*(ph/4);    pointTextRef.left = (pw/4);    pointTextRef.selected = true;    charStyle.applyTo(pointTextRef.textRange);        //draw base triangle    drawLine(currX,currY,currX,currY-ph,{"addTo":g,"strokeColor":red}); //left    drawLine(currX,currY-ph,currX+pw,currY,{"addTo":g,"strokeColor":black}); //angle    drawLine(currX+pw,currY,currX,currY,{"addTo":g,"strokeColor":red}); //top        //draw tabs    //left    drawLine(currX,currY,currX-tabSize,currY-tabSize,{"addTo":g,"strokeColor":black});    drawLine(currX-tabSize,currY-tabSize,currX-tabSize,currY-(ph-tabSize),{"addTo":g,"strokeColor":black});    drawLine(currX-tabSize,currY-(ph-tabSize),currX,currY-ph,{"addTo":g,"strokeColor":black});           //first and third triangles: base is pw, radius is ph/2    //slant height (sh) is sqrt of pyrH squared + radius squared//~     drawLine(currX+pw/2,currY,currX+pw/2,currY+sh,cyan); //sh    drawLine(currX,currY,currX+pw/2,currY+sh,{"addTo":g,"strokeColor":red});    drawLine(currX+pw/2,currY+sh,currX+pw,currY,{"addTo":g,"strokeColor":black});//~     drawLine(currX+pw/2,currY-ph,currX+pw/2,currY-ph-sh,cyan); //sh    // get first angle    var a1 = Math.atan( sh/(pw/2) );    var a2 = Math.atan( sh2/(ph/2) );    var shiftX = ph * Math.cos(Math.PI - (a1+a2));    var shiftY = ph * Math.sin(Math.PI - (a1+a2));       var newX = currX+pw+shiftX;    var newY = currY+shiftY;       //fourth triangle: reversed position    drawLine(currX,currY,currX-shiftX,currY+shiftY,{"addTo":g,"strokeColor":black});    drawLine(currX-shiftX,currY+shiftY,currX+pw/2,currY+sh,{"addTo":g,"strokeColor":black});       } // end createEqTri()function createTube(path,index,data) {    var pw,ph,curvew,totalw;    pw = path.width;    ph = path.height;    curvew = Math.PI*(path.width/2);//~     $.writeln("width: " + path.width);//~     $.writeln("height: " + path.height);//~     $.writeln(curvew);    //generate group    var g = newLayer.groupItems.add();        //add number to group    pointTextRef = g.textFrames.add();    pointTextRef.contents = index;    pointTextRef.top = -1*(ph/4);    pointTextRef.left = (pw/4);    pointTextRef.selected = true;    charStyle.applyTo(pointTextRef.textRange);        //rectangle(top,left,width,height);    totalw = pw+curvew;    var rect = g.pathItems.rectangle( currY, currX, totalw, ph);    rect.strokeColor = black;        currX += pw/2;    drawLine(currX,currY+9,currX,currY-ph-9,{"addTo":g,"strokeColor":red});    currX += curvew;    drawLine(currX,currY+9,currX,currY-ph-9,{"addTo":g,"strokeColor":red});        currX += 36;}function drawLine(x1,y1,x2,y2,opts) {//~     $.writeln(x1);//~     $.writeln(y1);//~     $.writeln(x2);//~     $.writeln(y2);    var newPath;    //create path object    if(opts["addTo"]){        newPath = opts["addTo"].pathItems.add();    } else {        newPath = doc.pathItems.add();    }        newPath.setEntirePath([[x1,y1],[x2,y2]]);        //styling options    if(opts["strokeColor"]) newPath.strokeColor = opts["strokeColor"];        return newPath;}function angleFromPoints(x1,y1,x2,y2) {    return Math.atan((y2-y1)/(x2-x1));}function dist(x1,y1,x2,y2) {    return Math.sqrt( ((x2-x1)*(x2-x1)) + ((y2-y1)*(y2-y1)) ); }function getRandomInt(min,max) {    return Math.floor((Math.random() * (max-min)) + min);}