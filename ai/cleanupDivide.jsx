#target Illustrator/* this script does something I WISH pathfinder did. I want to use the divide pathfinder tool, but not outline all of the shapes. it also helps clean up duplicate strokes and things *//* settings */var minDist = 10;var angleMode = "diag"; //opts: "diag", "cross", "any" /* script below */var thisAnchor, nextAnchor, thisDist;var storedLines = [];if ( app.documents.length > 0 && app.activeDocument.pathItems.length > 0 ) {    doc = app.activeDocument;    $.writeln("total paths: " + doc.pathItems.length);        for (var i = doc.pathItems.length - 1; i >= 0; i-- ) {        pathRef = doc.pathItems[i];        $.writeln("processing path " + i);                if(pathRef.strokeColor.typename == "NoColor") {            pathRef.remove();            continue;        }        for (var p= 0; p < pathRef.pathPoints.length; p++) {                thisAnchor = pathRef.pathPoints[p].anchor;                nextAnchor = (p!=0) ? pathRef.pathPoints[p-1].anchor : pathRef.pathPoints[pathRef.pathPoints.length - 1].anchor;                thisDist = calcPathDist (thisAnchor[0], thisAnchor[1], nextAnchor[0], nextAnchor[1]);                thisAngle = Math.round( calcAngle(thisAnchor[0], thisAnchor[1], nextAnchor[0], nextAnchor[1]) );                if (thisDist >= minDist && checkAngleMode(thisAngle, angleMode)) {                    if(isUnique(storedLines,[thisAnchor,nextAnchor])) {                        storedLines.push([thisAnchor,nextAnchor]);                    }                }        }        pathRef.remove();    }    $.writeln("total lines to draw: " + storedLines.length);    for(var l = 0; l < storedLines.length; l++) {        $.writeln("drawing line " + l);        newPath = app.activeDocument.pathItems.add();        newPath.setEntirePath(storedLines[l]);    }}function calcPathDist (x1,y1,x2,y2) {    var dist = Math.sqrt( Math.pow ((x2 - x1), 2) + Math.pow ((y2 - y1), 2) );    return dist;}function calcAngle (x1,y1,x2,y2) {    var angleDeg = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;    return angleDeg;}function isUnique(array,item) {    for(var i = 0; i < array.length; i++) {        if(item == array[i]) return false;//~         $.writeln(item[0][0] == array[i][1][0]);//~         $.writeln(item[0][1] == array[i][1][1]);//~         $.writeln(item[1][0] == array[i][0][0]);//~         $.writeln(item[1][1] == array[i][0][1]);        if(item[0][0] == array[i][1][0] && item[0][1] == array[i][1][1] && item[1][0] == array[i][0][0] && item[1][1] == array[i][0][1]) return false;    }    return true;}function checkAngleMode(angle, angleMode) {    switch(angleMode) {        case "diag":            return (angle == -45 || angle == 45 || angle == 135 || angle == -135);            break;        case "cross":            return (angle == 0 || angle == 90 || angle == -90 || angle == 180);            break;         case "any":            return true;            break;        default:            return true;    }    //just in case    return false;}